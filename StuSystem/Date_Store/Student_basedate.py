import pymysql  # 导入数据库连接库，这里以 MySQL 为例
import random
import calendar
import datetime

# 建立数据库连接
connection = pymysql.connect(host='localhost',
                             port=3306,
                             user='root',
                             password='root',
                             database='stu_system',
                             charset='utf8')

# 创建游标对象
cursor = connection.cursor()




# 定义专业和学院列表
colleges = {
    "计算机与信息工程学院": ["计算机科学与技术", "数据科学与大数据技术", "电子信息工程", "电子商务", "软件工程", "网络安全"],
    "管理学院": ["物流工程", "物联网工程", "物流管理", "市场营销"],
    "会计学院": ["财务管理", "审计学", "会计学", "工商管理类"],
    "财政与公共管理学院": ["财政学", "税收学", "行政管理", "劳动与社会保障"],
    "药学院": ["药学", "中药学", "制药工程"],
    "食品工程学院": ["食品科学与工程", "生物工程", "食品质量与安全", "环境工程"],
    "能源与建筑工程学院": ["土木工程", "工程管理", "能源与动力工程", "建筑环境与能源应用工程", "油气储运工程"],
    "金融学院": ["投资学", "保险学", "金融工程", "金融学"],
    "设计艺术学院": ["视觉传达设计", "绘画", "环境设计", "产品设计"],
    "轻工学院": ["机械自动化", "工业工程", "包装工程", "机器人工程", "印刷工程"],
    "经济学院": ["统计学", "经济与贸易", "国际经济与贸易"],
    "外语学院": ["英语", "俄语", "商务英语", "法语", "德语"],
    "商务学院": ["人力资源管理", "工商管理", "市场营销", "会展经济与管理"],
    "基础科学学院": ["汉语言文学", "数学与应用数学", "新闻学"],
    "体育学院": ["体育教育", "社会体育指导与管理", "运动训练"]  # 假设的体育专业
}

Last_name = [
    "赵", "钱", "孙", "李", "周", "吴", "郑", "王", "冯", "陈", "褚", "卫", "蒋", "沈", "韩", "杨",
    "朱", "秦", "尤", "许", "何", "吕", "施", "张", "孔", "曹", "严", "华", "金", "魏", "陶", "姜",
    "戚", "谢", "邹", "喻", "柏", "水", "窦", "章", "云", "苏", "潘", "葛", "奚", "范", "彭", "郎",
    "鲁", "韦", "昌", "马", "苗", "凤", "花", "方", "俞", "任", "袁", "柳", "酆", "鲍", "史", "唐",
    "费", "廉", "岑", "薛", "雷", "贺", "倪", "汤", "滕", "殷", "罗", "毕", "郝", "邬", "安", "常",
    "乐", "于", "时", "傅", "皮", "卞", "齐", "康", "伍", "余", "元", "卜", "顾", "孟", "平", "黄",
    "和", "穆", "萧", "尹", "姚", "邵", "湛", "汪", "祁", "毛", "禹", "狄", "米", "贝", "明", "臧",
    "计", "伏", "成", "戴", "谈", "宋", "茅", "庞", "熊", "纪", "舒", "屈", "项", "祝", "董", "梁",
    "杜", "阮", "蓝", "闵", "席", "季", "麻", "强", "贾", "路", "娄", "危", "江", "童", "颜", "郭",
    "梅", "盛", "林", "刁", "钟", "徐", "邱", "骆", "高", "夏", "蔡", "田", "樊", "胡", "凌", "霍",
    "虞", "万", "支", "柯", "昝", "管", "卢", "莫", "经", "房", "芮", "羿", "储", "靳", "汲", "邴",
    "糜", "松", "井", "段", "富", "巫", "乌", "焦", "巴", "弓", "牧", "隗", "山", "谷", "车", "侯",
    "宓", "蓬", "全", "郗", "班", "仰", "秋", "仲", "伊", "宫", "宁", "仇", "栾", "暴", "甘", "钭",
    "厉", "戎", "祖", "武", "符", "刘", "景", "詹", "束", "龙", "叶", "幸", "司", "韶", "郜", "黎",
    "蓟", "薄", "印", "宿", "白", "怀", "蒲", "邰", "从", "鄂", "索", "咸", "籍", "赖", "卓", "蔺",
    "屠", "蒙", "池", "乔", "阴", "郁", "胥", "能", "苍", "双", "闻", "莘", "党", "翟", "谭", "贡",
    "劳", "逄", "姬", "申", "扶", "堵", "冉", "宰", "郦", "雍", "郤", "璩", "桑", "桂", "濮", "牛",
    "寿", "通", "边", "扈", "燕", "冀", "郏", "浦", "尚", "农", "温", "别", "庄", "晏", "柴", "瞿",
    "阎", "充", "慕", "连", "茹", "习", "宦", "艾", "容", "向", "古", "易", "廖", "都", "耿", "国",
    "文", "聂", "晁", "勾", "敖", "融", "冷", "辛", "简", "饶", "曾", "沙", "关", "荆", "游", "竺",
    "司马", "上官", "欧阳", "夏侯", "诸葛", "闻人", "东方", "皇甫", "尉迟", "淳于", "公孙", "仲孙",
    "轩辕", "令狐", "钟离", "宇文", "长孙", "慕容", "司徒", "司空", "呼延", "归海", "南宫", "仲长",
    "尔朱", "长孙", "慕容", "司徒", "司空", "拓跋"
]

male_name = [
    '伟', '强', '磊', '军', '杰', '宇', '浩', '然', '翔', '博',
    '轩', '瑞', '志', '逸', '天', '展', '昊', '晨', '修', '军',
    '语', '智', '浩', '俊', '健', '骏', '峻', '程', '柏', '然',
    '林', '瑾', '思', '洋', '睿', '强', '诚', '峰', '铭', '斌',
    '越泽', '凯瑞', '博瑞', '志豪', '子默', '雨晨', '懿天', '晨熙', '嘉懿', '语堂',
    '雪松', '翔宇', '智宸', '俊杰', '浩轩', '思源', '磊磊', '博文', '子轩', '志强',
    '鹏飞', '炎彬', '宇轩', '煜城', '智渊', '瑾瑜', '思淼', '昊然', '明轩', '思远',
    '昊天', '晨阳', '鹏翼', '天翊', '天翔', '昊焱', '炫明', '泽宇', '熙伟', '泽洋',
    '文轩', '翔飞', '浩然', '俊驰', '宇博', '思聪', '煜祺', '天宇', '鑫雨', '晓明'
]

female_name = [
    '琪', '茜', '莎', '婷', '岚', '茹', '嫣', '蕾', '黛', '萱',
    '妍', '琳', '霏', '曦', '瑾', '璇', '瑶', '露', '莹', '清'
                                                 '之桃', '晓琳', '雨娇', '欣雨', '雨婷', '语兰', '梓涵', '思淼', '文轩', '文博',
    '思涵', '乐之', '梦琪', '沛菡', '芷婷', '晓瑶', '香寒', '欣彤', '雪娇', '乐菱',
    '立果', '明轩', '浩宇', '涵柏', '诗琪', '芷瑶', '子默', '思远', '晨阳', '芷若',
    '煜祺', '天宇', '雨晨', '晨轩', '嘉欣', '鹭洋', '思源', '语蓉', '晓萱', '曼文',
    '雪梅', '语琴', '锦程', '新柔', '思瑶', '雅娇', '欣怡', '雅琳', '心琪', '嘉懿',
    '天瑜', '晓博', '尔岚', '夜蓉', '思琳', '语嫣', '语堂', '鑫雨', '雨莉', '嘉熙',
    '梦瑶', '晓明', '欣琳', '欣瑶', '雅婷', '宇轩', '诗雅', '慕青', '安澜'
]

# 定义省份市区列表
provinces = ["北京市", "天津市", "河北省", "山西省", "内蒙古自治区", "辽宁省", "吉林省", "黑龙江省", "上海市", "江苏省", "浙江省", "安徽省", "福建省", "江西省",
             "山东省", "河南省", "湖北省", "湖南省", "广东省", "广西壮族自治区", "海南省", "重庆市", "四川省", "贵州省", "云南省", "西藏自治区", "陕西省", "甘肃省",
             "青海省", "宁夏回族自治区", "新疆维吾尔自治区", "香港特别行政区", "澳门特别行政区", "台湾省"]
cities = {
    "北京市": ["北京市"],
    "天津市": ["天津市"],
    "河北省": ["石家庄市", "唐山市", "秦皇岛市", "邯郸市", "邢台市", "保定市", "张家口市", "承德市", "沧州市", "廊坊市", "衡水市"],
    "山西省": ["太原市", "大同市", "阳泉市", "长治市", "晋城市", "朔州市", "晋中市", "运城市", "忻州市", "临汾市", "吕梁市"],
    "内蒙古自治区": ["呼和浩特市", "包头市", "乌海市", "赤峰市", "通辽市", "鄂尔多斯市", "呼伦贝尔市", "巴彦淖尔市", "乌兰察布市", "兴安盟", "锡林郭勒盟", "阿拉善盟"],
    "辽宁省": ["沈阳市", "大连市", "鞍山市", "抚顺市", "本溪市", "丹东市", "锦州市", "营口市", "阜新市", "辽阳市", "盘锦市", "铁岭市", "朝阳市", "葫芦岛市"],
    "吉林省": ["长春市", "吉林市", "四平市", "辽源市", "通化市", "白山市", "松原市", "白城市", "延边朝鲜族自治州"],
    "黑龙江省": ["哈尔滨市", "齐齐哈尔市", "鸡西市", "鹤岗市", "双鸭山市", "大庆市", "伊春市", "佳木斯市", "七台河市", "牡丹江市", "黑河市", "绥化市", "大兴安岭地区"],
    "上海市": ["上海市"],
    "江苏省": ["南京市", "无锡市", "徐州市", "常州市", "苏州市", "南通市", "连云港市", "淮安市", "盐城市", "扬州市", "镇江市", "泰州市", "宿迁市"],
    "浙江省": ["杭州市", "宁波市", "温州市", "嘉兴市", "湖州市", "绍兴市", "金华市", "衢州市", "舟山市", "台州市", "丽水市"],
    "安徽省": ["合肥市", "芜湖市", "蚌埠市", "淮南市", "马鞍山市", "淮北市", "铜陵市", "安庆市", "黄山市", "滁州市", "阜阳市", "宿州市", "六安市", "亳州市", "池州市",
            "宣城市"],
    "福建省": ["福州市", "厦门市", "莆田市", "三明市", "泉州市", "漳州市", "南平市", "龙岩市", "宁德市"],
    "江西省": ["南昌市", "景德镇市", "萍乡市", "九江市", "新余市", "鹰潭市", "赣州市", "吉安市", "宜春市", "抚州市", "上饶市"],
    "山东省": ["济南市", "青岛市", "淄博市", "枣庄市", "东营市", "烟台市", "潍坊市", "济宁市", "泰安市", "威海市", "日照市", "临沂市", "德州市", "聊城市", "滨州市",
            "菏泽市"],
    "河南省": ["郑州市", "开封市", "洛阳市", "平顶山市", "安阳市", "鹤壁市", "新乡市", "焦作市", "濮阳市", "许昌市", "漯河市", "三门峡市", "南阳市", "商丘市", "信阳市",
            "周口市", "驻马店市"],
    "湖北省": ["武汉市", "黄石市", "十堰市", "宜昌市", "襄阳市", "鄂州市", "荆门市", "孝感市", "荆州市", "黄冈市", "咸宁市", "随州市", "恩施土家族苗族自治州", "仙桃市",
            "潜江市", "天门市", "神农架林区"],
    "湖南省": ["长沙市", "株洲市", "湘潭市", "衡阳市", "邵阳市", "岳阳市", "常德市", "张家界市", "益阳市", "郴州市", "永州市", "怀化市", "娄底市", "湘西土家族苗族自治州"],
    "广东省": ["广州市", "韶关市", "深圳市", "珠海市", "汕头市", "佛山市", "江门市", "湛江市", "茂名市", "肇庆市", "惠州市", "梅州市", "汕尾市", "河源市", "阳江市",
            "清远市", "东莞市", "中山市", "潮州市", "揭阳市", "云浮市"],
    "广西壮族自治区": ["南宁市", "柳州市", "桂林市", "梧州市", "北海市", "防城港市", "钦州市", "贵港市", "玉林市", "百色市", "贺州市", "河池市", "来宾市", "崇左市",
                "岑溪市", "东兴市", "桂平市", "北流市", "合山市", "凭祥市"],
    "海南省": ["海口市", "三亚市", "儋州市", "五指山市", "琼海市", "文昌市", "万宁市", "东方市", "定安县", "屯昌县", "澄迈县", "临高县", "白沙黎族自治县", "昌江黎族自治县",
            "乐东黎族自治县", "陵水黎族自治县", "保亭黎族苗族自治县", "琼中黎族苗族自治县"],
    "重庆市": ["重庆市"],  # 重庆市为直辖市，不区分市
    "四川省": ["成都市", "自贡市", "攀枝花市", "泸州市", "德阳市", "绵阳市", "广元市", "遂宁市", "内江市", "乐山市", "南充市", "眉山市", "宜宾市", "广安市", "达州市",
            "雅安市", "巴中市", "资阳市", "阿坝藏族羌族自治州", "甘孜藏族自治州", "凉山彝族自治州", "都江堰市", "彭州市", "邛崃市", "崇州市", "广汉市", "什邡市", "绵竹市",
            "江油市", "峨眉山市", "阆中市", "华蓥市", "万源市", "简阳市", "西昌市"],
    "贵州省": ["贵阳市", "六盘水市", "遵义市", "安顺市", "毕节市", "铜仁市", "黔西南布依族苗族自治州", "黔东南苗族侗族自治州", "黔南布依族苗族自治州", "清镇市", "赤水市", "仁怀市",
            "盘州市", "凯里市", "都匀市", "福泉市"],
    "云南省": ["昆明市", "曲靖市", "玉溪市", "保山市", "昭通市", "丽江市", "普洱市", "临沧市", "楚雄彝族自治州", "红河哈尼族彝族自治州", "文山壮族苗族自治州", "西双版纳傣族自治州",
            "大理白族自治州", "德宏傣族景颇族自治州", "怒江傈僳族自治州", "迪庆藏族自治州", "安宁市", "宣威市", "个旧市", "开远市", "灯塔市", "瑞丽市", "大理市", "楚雄市",
            "蒙自市", "文山市", "景洪市", "芒市", "泸水市"],
    "西藏自治区": ["拉萨市", "日喀则市", "昌都市", "林芝市", "山南市", "那曲市", "阿里地区", "格尔木市"],
    "陕西省": ["西安市", "铜川市", "宝鸡市", "咸阳市", "渭南市", "延安市", "汉中市", "榆林市", "安康市", "商洛市", "韩城市", "华阴市", "兴平市", "神木市", "华州市",
            "子长市"],
    "甘肃省": ["兰州市", "嘉峪关市", "金昌市", "白银市", "天水市", "武威市", "张掖市", "平凉市", "酒泉市", "庆阳市", "定西市", "陇南市", "临夏回族自治州", "甘南藏族自治州",
            "玉门市", "敦煌市", "临夏市", "合作市"],
    "青海省": ["西宁市", "海东市", "海北藏族自治州", "黄南藏族自治州", "海南藏族自治州", "果洛藏族自治州", "玉树藏族自治州", "海西蒙古族藏族自治州", "格尔木市", "德令哈市"],
    "宁夏回族自治区": ["银川市", "石嘴山市", "吴忠市", "固原市", "中卫市", "灵武市", "青铜峡市", "中宁县", "海原县"],
    "新疆维吾尔自治区": ["乌鲁木齐市", "克拉玛依市", "吐鲁番市", "哈密市", "昌吉回族自治州", "博尔塔拉蒙古自治州", "巴音郭楞蒙古自治州", "阿克苏地区", "克孜勒苏柯尔克孜自治州", "喀什地区",
                 "和田地区", "伊犁哈萨克自治州", "塔城地区", "阿勒泰地区", "石河子市", "阿拉尔市", "图木舒克市", "五家渠市", "北屯市", "铁门关市", "双河市", "可克达拉市",
                 "昆玉市", "胡杨河市"],
    "香港特别行政区": ["香港岛", "九龙", "新界", "离岛"],  # 香港特别行政区不区分市，而是分为不同的区域
    "澳门特别行政区": ["澳门半岛", "氹仔岛", "路环岛"],  # 澳门特别行政区同样不区分市，而是分为不同的岛屿和区域
    "台湾省": ["台北市", "新北市", "桃园市", "台中市", "台南市", "高雄市", "基隆市", "新竹市", "嘉义市", "新竹县", "宜兰县", "苗栗县", "彰化县", "南投县", "云林县",
            "嘉义县", "屏东县", "台东县", "花莲县", "澎湖县", "金门县", "连江县(马祖)"]  # 台湾省包括多个市和县
}


# 省份及其对应的3位数字代码
province_codes = {
    "北京市": "110",
    "天津市": "120",
    "河北省": "130",
    "山西省": "140",
    "内蒙古自治区": "150",
    "辽宁省": "210",
    "吉林省": "220",
    "黑龙江省": "230",
    "上海市": "310",
    "江苏省": "320",
    "浙江省": "330",
    "安徽省": "340",
    "福建省": "350",
    "江西省": "360",
    "山东省": "370",
    "河南省": "410",
    "湖北省": "420",
    "湖南省": "430",
    "广东省": "440",
    "广西壮族自治区": "450",
    "海南省": "460",
    "重庆市": "500",
    "四川省": "510",
    "贵州省": "520",
    "云南省": "530",
    "西藏自治区": "540",
    "陕西省": "610",
    "甘肃省": "620",
    "青海省": "630",
    "宁夏回族自治区": "640",
    "新疆维吾尔自治区": "650",
    "香港特别行政区": "810",
    "澳门特别行政区": "820",
    "台湾省": "710"
}


# 生成随机籍贯的函数
def generate_hometown(provinces, cities):
    province = random.choice(provinces)
    city = random.choice(cities[province])
    return f"{province}{city}"


# 得到籍贯所在的省的函数
def extract_province(hometown):
    for province in provinces:
        if hometown.startswith(province):
            return province
    return None  # 如果籍贯字符串不以任何省份开头，则返回None


# 生成随机出生日期的函数
def generate_birthday():
    year = random.randint(1995, 2004)
    month = random.randint(1, 12)
    # 确保天数的有效性
    max_days = calendar.monthrange(year, month)[1]
    day = random.randint(1, max_days)
    return f"{year}{month:02d}{day:02d}"


# 计算年龄的函数
def calculate_age(birthday):
    # 将生日字符串转换为日期对象
    birthday_date = datetime.datetime.strptime(birthday, "%Y%m%d").date()
    # 获取当前日期
    current_date = datetime.date.today()
    # 计算年龄
    age = current_date.year - birthday_date.year - (
                (current_date.month, current_date.day) < (birthday_date.month, birthday_date.day))
    return age


# 随机生成学号的函数
def generate_student_id(province_codes, hometown, birthday):
    entry_year = str(int(birthday[:4]) + 18)  # 将出生年份加18作为入学年份
    province = extract_province(hometown)
    if province:
        province_code = province_codes[province][:3]
        random_suffix = random.randint(10000, 99999)
        return f"{entry_year}{province_code}{random_suffix:05d}"
    else:
        # 如果籍贯不是有效的省份，则返回 None
        return None


# 生成随机年级的函数
def generate_grade(student_id):
    return student_id[:4]


# 生成随机性别的函数
def generate_gender():
    return random.choice(["男", "女"])


# 生成随机姓名的函数
def generate_name(gender):
    last_name = random.choice(Last_name)
    if gender == "男":
        first_name = random.choice(male_name)
    elif gender == "女":
        first_name = random.choice(female_name)
    else:
        raise ValueError("Gender must be either '男' or '女'.")
    return last_name + first_name





# 生成随机学院和专业的函数
def generate_college_and_specialty():
    college = random.choice(list(colleges.keys()))
    specialties = colleges[college]
    specialty = random.choice(specialties)
    return college, specialty


# 生成随机班级的函数
def generate_class():
    return random.choice(["1班", "2班", "3班"])


# 生成学生信息的函数
def generate_student_info(count=5000):
    students = []
    for _ in range(count):
        stu_hometown = generate_hometown(provinces, cities)
        stu_birthday = generate_birthday()
        stu_age = calculate_age(stu_birthday)
        stu_id = generate_student_id(province_codes, stu_hometown, stu_birthday)
        stu_gender = generate_gender()
        stu_name = generate_name(stu_gender)

        stu_grade = generate_grade(stu_id)
        college, specialty = generate_college_and_specialty()
        stu_specialtyWithClass = "{}{}".format(specialty, generate_class())

        students.append({
            "stu_id": stu_id,
            "stu_name": stu_name,
            "stu_gender": stu_gender,
            "stu_birthday": stu_birthday,
            "stu_age": stu_age,
            "stu_hometown": stu_hometown,
            "stu_grade": stu_grade,
            "stu_school": college,
            "stu_specialtyWithClass": stu_specialtyWithClass
        })

    return students




students = generate_student_info(10000)





# 构建 SQL 插入语句
sql_insert = "INSERT INTO " \
             "students_infos (stu_id, stu_name, stu_gender, stu_age, stu_grade, stu_school, stu_specialtyWithClass, stu_birthday, stu_hometown) " \
             "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)"

# 执行插入操作
try:
    # 将字典中的值插入数据库
    for student in students:
        cursor.execute(sql_insert,
                       (student['stu_id'], student['stu_name'], student['stu_gender'],
                        student['stu_age'], student['stu_grade'], student['stu_school'],
                        student['stu_specialtyWithClass'], student['stu_birthday'], student['stu_hometown']))

    # 提交事务
    connection.commit()
    print("数据插入成功！")
except Exception as e:
    # 发生错误时回滚
    connection.rollback()
    print("数据插入失败:", e)



